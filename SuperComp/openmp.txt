#include <stdio.h>
#include "omp.h"
#include <stdlib.h>

//minha versao merda
/* 
static long num_steps_global = 1000000;
double step;

int main(){
    step = 1.0/ (double) num_steps_global;
    double pi, sum_total = 0.0;
    int size = omp_get_num_threads();
    #pragma omp parallel
    {
        int rank = omp_get_thread_num();
        int i, num_steps, sum = 0, comeco;
        double x;

        num_steps = num_steps_global / size;
        comeco = rank * num_steps;

        for( i = comeco ; i < comeco + num_steps ; i++){
            x = (i+0.5)*step;
            sum += 4.0/(1.0+x*x);
        }

        sum_total += sum;
    }
    pi = step * sum_total;
    printf("%f\n", pi);
}
*/

//varsao prof
/*
static long num_steps = 1000000000;
double step;

int main(int agrc, char **agrv){

    int size, nthreads;
    double pi, *sum;
    if (agrc > 1) nthreads = atoi(agrv[1]);
    sum = malloc(sizeof(double)*nthreads);
    step = 1.0/ (double) num_steps;
    omp_set_num_threads(nthreads);
    #pragma omp parallel
    {
        double x;
        size = omp_get_num_threads();
        int rank = omp_get_thread_num();
        sum[rank] = 0.0;
        for( int i = rank ; i < num_steps ; i+=size){
            x = (i+0.5)*step;
            sum[rank] += 4.0/(1.0+x*x);
        }
    }

    for(int i=0; i<size; i++)
        pi += step * sum[i];
    printf("%f\n", pi);

    free(sum);
}
 */

//versao com critical
static long num_steps = 1000000000;
double step;

int main(int agrc, char **agrv){

    int size, nthreads;
    double pi = 0.0;
    if (agrc > 1) nthreads = atoi(agrv[1]);
    step = 1.0/ (double) num_steps;
    omp_set_num_threads(nthreads);
    #pragma omp parallel
    {
        double x, sum = 0.0;
        size = omp_get_num_threads();
        int rank = omp_get_thread_num();
        for( int i = rank ; i < num_steps ; i+=size){
            x = (i+0.5)*step;
            sum += 4.0/(1.0+x*x);
        }
        #pragma omp critical
        pi += step * sum;
    }

    printf("%f\n", pi);
}